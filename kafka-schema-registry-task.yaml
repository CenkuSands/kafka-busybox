apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kafka-schema-validation-task
spec:
  params:
    - name: topic
      type: string
      description: "Kafka topic name"
    - name: version
      type: string
      description: "Schema version to validate (optional, default: latest)"
      default: "latest"
  steps:
    - name: list-schema-versions
      image: curlimages/curl:latest
      script: |
        #!/bin/bash

        echo "Fetching schema versions for topic: $(params.topic)"

        # List all schema versions for the topic
        curl -s -u $USERNAME:$PASSWORD "$SCHEMA_REGISTRY_URL/subjects/$(params.topic)-value/versions" | jq .

        # Check if the request was successful
        if [ $? -ne 0 ]; then
            echo "Error: Unable to fetch schema versions for topic $(params.topic)."
            exit 1
        fi
    - name: fetch-and-validate-schema
      image: curlimages/curl:latest
      script: |
        #!/bin/bash

        echo "Validating schema for topic: $(params.topic), version: $(params.version)"

        # Use the specified version or default to "latest"
        VERSION=$(params.version)
        if [ "$VERSION" == "latest" ]; then
          VERSION=$(curl -s -u $USERNAME:$PASSWORD "$SCHEMA_REGISTRY_URL/subjects/$(params.topic)-value/versions/latest" | jq -r '.version')
        fi

        echo "Fetching schema for topic: $(params.topic), version: $VERSION"

        # Fetch the schema
        SCHEMA_URL="$SCHEMA_REGISTRY_URL/subjects/$(params.topic)-value/versions/$VERSION"
        schema_output=$(curl -s -u $USERNAME:$PASSWORD $SCHEMA_URL)

        # Check if schema was fetched successfully
        if [ $? -ne 0 ]; then
            echo "Error: Unable to fetch schema for topic $(params.topic) and version $VERSION"
            exit 1
        fi

        echo "Schema fetched successfully:"
        echo "$schema_output" | jq .

        # Validate schema (example validation logic)
        schema_type=$(echo "$schema_output" | jq -r '.schema | fromjson | .type // empty')

        if [ "$schema_type" == "record" ]; then
            echo "Schema validation successful: Topic $(params.topic), version $VERSION has a valid schema."
        else
            echo "Schema validation failed: Invalid schema for topic $(params.topic), version $VERSION."
            exit 1
        fi
  env:
    - name: SCHEMA_REGISTRY_URL
      valueFrom:
        configMapKeyRef:
          name: schema-config
          key: schema_registry_url
    - name: USERNAME
      valueFrom:
        secretKeyRef:
          name: schema-registry-credentials
          key: username
    - name: PASSWORD
      valueFrom:
        secretKeyRef:
          name: schema-registry-credentials
          key: password
